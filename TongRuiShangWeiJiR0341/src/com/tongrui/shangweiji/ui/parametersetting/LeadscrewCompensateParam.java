/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LeadscrewCompensateParam.java
 *
 * Created on 2012-8-13, 14:41:09
 */
package com.tongrui.shangweiji.ui.parametersetting;

import com.tongrui.shangweiji.biz.ServiceLocator;
import com.tongrui.shangweiji.comm.Constant;
import com.tongrui.shangweiji.comm.ControllerSvcImpl;
import com.tongrui.shangweiji.data.CatDeviceparamType;
import com.tongrui.shangweiji.data.CatDeviceparamValue;
import common.CommonMethod;
import common.SystemInfo;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Administrator
 */
public class LeadscrewCompensateParam extends javax.swing.JFrame {

    //床位X2表格设定
    public static final int X2_ROWCOUNT = 20;
    public static final int X2_COLUMNCOUNT = 10; //column count 必须是偶数（点数和值成对出现）
    //头架X11表格设定
    public static final int X11_ROWCOUNT = 20;
    public static final int X11_COLUMNCOUNT = 6; //column count 必须是偶数（点数和值成对出现）
    //头架Y11表格设定
    public static final int Y11_ROWCOUNT = 20;
    public static final int Y11_COLUMNCOUNT = 6; //column count 必须是偶数（点数和值成对出现）
    
    public static final Float VALUE_LOWLIMIT= -500.0f;
    public static final Float VALUE_UPPERLIMIT = 500.0f;
    private static LeadscrewCompensateParam pararScrew = null;

    public static LeadscrewCompensateParam getInstance() {
        if (pararScrew == null) {
            try {
                pararScrew = new LeadscrewCompensateParam();
            } catch (Throwable ex) {
                Logger.getLogger(LeadscrewCompensateParam.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "本地数据库访问出错,请重试!");
            }
        }
        return pararScrew;
    }
    private List<CatDeviceparamValue> paramListX2;
    private List<CatDeviceparamValue> paramListX11;
    private List<CatDeviceparamValue> paramListY11;

    /**
     * Creates new form LeadscrewCompensateParam
     */
    public LeadscrewCompensateParam() throws Throwable {
        System.out.println("to inti component for screw param");

        initComponents();
        this.setLocationRelativeTo(null);

        defaultSetting();
        if (Constant.DEBUG_this_is_TouDao) {
            //
        } else { //if it's TiDao
            jLabel10.setText("床位左右 X11");
            jLabel11.setText("床位上下 Y11");
        }
        init2Tables();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableX2 = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextPointNumber = new javax.swing.JTextField();
        jTextStep = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableX11 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        saveBtn1 = new javax.swing.JButton();
        cancelBtn1 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tableY11 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        saveBtn2 = new javax.swing.JButton();
        cancelBtn2 = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jRadioButtonY11 = new javax.swing.JRadioButton();
        jRadioButtonX11 = new javax.swing.JRadioButton();
        jPanel26 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jTextPointNumber1 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextStep1 = new javax.swing.JTextField();
        jPanel27 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("螺距补偿");
        jPanel3.add(jLabel8, java.awt.BorderLayout.NORTH);

        jTabbedPane1.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        jPanel8.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("床位前后 X2");
        jPanel8.add(jLabel5, java.awt.BorderLayout.NORTH);

        jPanel17.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel17.setLayout(new java.awt.BorderLayout());

        jPanel4.setName("本地"); // NOI18N
        jPanel4.setOpaque(false);

        saveBtn.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        saveBtn.setText("保存");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jPanel4.add(saveBtn);

        cancelBtn.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        cancelBtn.setText("放弃");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        jPanel4.add(cancelBtn);

        jPanel17.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        tableX2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, true, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableX2);

        jPanel17.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel17, java.awt.BorderLayout.CENTER);

        jPanel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel11.setPreferredSize(new java.awt.Dimension(500, 120));
        jPanel11.setLayout(new java.awt.GridLayout(1, 3));

        jPanel14.setName("得到"); // NOI18N

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 114, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel14);

        jButton1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jButton1.setText("重置补偿点");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel2.setText("点数");

        jLabel4.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel4.setText("间隔");

        jTextPointNumber.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N

        jTextStep.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextPointNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(jTextStep, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(46, 46, 46)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextPointNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(37, 37, 37))
        );

        jPanel11.add(jPanel15);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 114, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel16);

        jPanel8.add(jPanel11, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("床位", jPanel8);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel20.setLayout(new java.awt.GridLayout(1, 2, 10, 5));

        jPanel22.setLayout(new java.awt.BorderLayout());

        jLabel10.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("头架左右 X11");
        jPanel22.add(jLabel10, java.awt.BorderLayout.PAGE_START);

        jScrollPane8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableX11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tableX11.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        tableX11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableX11.setColumnSelectionAllowed(true);
        tableX11.setRowHeight(40);
        tableX11.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tableX11);
        tableX11.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableX11.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableX11.getColumnModel().getColumn(0).setMaxWidth(140);
        tableX11.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableX11.getColumnModel().getColumn(2).setMaxWidth(140);
        tableX11.getColumnModel().getColumn(4).setPreferredWidth(100);
        tableX11.getColumnModel().getColumn(4).setMaxWidth(140);

        jPanel22.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        saveBtn1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        saveBtn1.setText("保存");
        saveBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(saveBtn1);

        cancelBtn1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        cancelBtn1.setText("放弃");
        cancelBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(cancelBtn1);

        jPanel22.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel20.add(jPanel22);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jLabel11.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("头架上下 Y11");
        jPanel23.add(jLabel11, java.awt.BorderLayout.NORTH);

        jScrollPane9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableY11.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        tableY11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)", "补偿点(mm)", "值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableY11.setColumnSelectionAllowed(true);
        tableY11.setRowHeight(40);
        tableY11.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(tableY11);
        tableY11.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableY11.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableY11.getColumnModel().getColumn(0).setMaxWidth(140);
        tableY11.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableY11.getColumnModel().getColumn(2).setMaxWidth(140);
        tableY11.getColumnModel().getColumn(4).setPreferredWidth(100);
        tableY11.getColumnModel().getColumn(4).setMaxWidth(140);

        jPanel23.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        saveBtn2.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        saveBtn2.setText("保存");
        saveBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn2ActionPerformed(evt);
            }
        });
        jPanel2.add(saveBtn2);

        cancelBtn2.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        cancelBtn2.setText("放弃");
        cancelBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn2ActionPerformed(evt);
            }
        });
        jPanel2.add(cancelBtn2);

        jPanel23.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel20.add(jPanel23);

        jPanel12.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel24.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel24.setPreferredSize(new java.awt.Dimension(772, 120));
        jPanel24.setLayout(new java.awt.GridLayout(1, 3));

        buttonGroup1.add(jRadioButtonY11);
        jRadioButtonY11.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jRadioButtonY11.setText("Y11 头架上下");

        buttonGroup1.add(jRadioButtonX11);
        jRadioButtonX11.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jRadioButtonX11.setSelected(true);
        jRadioButtonX11.setText("X11 头架左右");
        jRadioButtonX11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonX11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap(178, Short.MAX_VALUE)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonX11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRadioButtonY11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jRadioButtonX11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonY11)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel24.add(jPanel25);

        jLabel12.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel12.setText("点数");

        jTextPointNumber1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jTextPointNumber1.setMinimumSize(new java.awt.Dimension(20, 35));
        jTextPointNumber1.setPreferredSize(new java.awt.Dimension(60, 35));

        jLabel14.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel14.setText("间隔");

        jTextStep1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                .addContainerGap(95, Short.MAX_VALUE)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(jTextStep1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(jTextPointNumber1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(86, 86, 86))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextPointNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14)
                    .addComponent(jTextStep1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel24.add(jPanel26);

        jButton2.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jButton2.setText("重置补偿点");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel27Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(37, 37, 37))
        );

        jPanel24.add(jPanel27);

        jPanel12.add(jPanel24, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("头架", jPanel12);

        jPanel3.add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("床位");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1072, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1072, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void defaultSetting() {
        tableX2.getTableHeader().setFont(new Font("", 0, 18));
        tableX11.getTableHeader().setFont(new Font("", 0, 18));
        tableY11.getTableHeader().setFont(new Font("", 0, 18));
        tableX2.setCellSelectionEnabled(true);
        tableX11.setCellSelectionEnabled(true);
        tableY11.setCellSelectionEnabled(true);
    }

   

    private void init2Tables() throws Throwable {
        this.paramListX2 = readListFromDB("X2");
        this.paramListX11 = readListFromDB("X11");
        this.paramListY11 = readListFromDB("Y11");
        loadList2Table(this.paramListX2, (DefaultTableModel) this.tableX2.getModel());
        loadList2Table(this.paramListX11, (DefaultTableModel) this.tableX11.getModel());
        loadList2Table(this.paramListY11, (DefaultTableModel) this.tableY11.getModel());
    }

    private List<CatDeviceparamValue> readListFromDB(String variableName) throws Throwable {
        String hql = "from CatDeviceparamValue as u where u.name = '" + variableName
                + "' and u.catDeviceparamType.name = 'screw_compensate' and u.used=1 order by u.position asc"; //desc is descrease order
        List<CatDeviceparamValue> paramList = ServiceLocator.getParameterService().findByHQL(hql);
        return paramList;
    }

    private void loadList2Table(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        int rowCount = tableModel.getRowCount();
        int columnCount = tableModel.getColumnCount();
        System.out.println("rowcount="+rowCount +" columnCount="+columnCount);
        for (int i = 0; i < rowCount; i++) {
          for (int k = 0; k < columnCount; k++) {
             int count = i * columnCount + k;
             int indexInParamList = count/2;
             CatDeviceparamValue param= paramList.get(indexInParamList);
             if(k%2==0)
              tableModel.setValueAt(param.getPosition(), i, k);
             else
              tableModel.setValueAt(param.getValue(), i, k);
            }

        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String textValue = null;
        textValue = jTextPointNumber.getText().trim();
        boolean inputValid = CommonMethod.checkIntFromTextField(textValue, null);
        if (!inputValid || textValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "错误，请输入整数！");
            return;
        }
        //else
        int pointNumber = Integer.valueOf(textValue);
        if (pointNumber > 100) { //Max point number is 100
            pointNumber = 100;
            jTextPointNumber.setText("100");
        } else if (pointNumber < 0) {//Min point number is 2
            pointNumber = 0;
            jTextPointNumber.setText("2");
        }

        textValue = jTextStep.getText().trim();
        inputValid = CommonMethod.checkIntFromTextField(textValue, null);
        if (!inputValid || textValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "错误，请输入整数！");
            return;
        }
        //else
        int step = Integer.valueOf(textValue);

        DefaultTableModel tableModel = (DefaultTableModel) this.tableX2.getModel();
        int current_idx = 0;
        int columnCount = tableModel.getColumnCount();
        int rowCount = tableModel.getRowCount();
         for (int row = 0; row < rowCount; row++) {
          for (int col = 0; col < columnCount; col++) {
             if(col%2==0){
                 //it is position
              String  position = (String) tableModel.getValueAt(row,col).toString();
               }
             else {
                 //it is value
                 if (current_idx < pointNumber) {
                    tableModel.setValueAt(new Float(0.0f+current_idx * step), row, col);
                   // tableModel.setValueAt(0, row, 2 * column + 1);
                } 
                 else{
                  tableModel.setValueAt(0, row, col);
                 }
                current_idx++;
             }
          }
         }
        
     
    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        updateX2ParamValues();
        JOptionPane.showMessageDialog(this, "数据已保存！");
}//GEN-LAST:event_saveBtnActionPerformed

    private void updateX2ParamValues() {
        long start = System.currentTimeMillis();
        this.ensureGetingCellNewValue(this.tableX2);
        DefaultTableModel tableModel = (DefaultTableModel) this.tableX2.getModel();

        //Prepare data to Trio
        double[] arrayData = new double[100];
        int pointNumber = buildArrayData(tableModel, arrayData);
        System.out.println("pointNumber="+pointNumber);
        if (pointNumber == -1) {
            return;  //Some data input is wrong
        }
        long end1 = System.currentTimeMillis();
        System.out.println("********************************prepare datat time =" +(end1-start) +"ms");
        
        updateNewValues(paramListX2, tableModel);
     
        double diff= (Float)tableModel.getValueAt(0, 1) -  (Float)tableModel.getValueAt(0, 0);
        //Send data to Trio
       new sendData2Trio(arrayData,pointNumber,diff).start();
    }
    
    class sendData2Trio extends Thread{
        double[] data;
        int pt;
        double df;
        public sendData2Trio( double[] arrayData,int pointNumber,double diff){
         data = arrayData;
         pt= pointNumber;
         df =diff;
          }
        public void run(){
           ctrlSvcImplObj.sendLeadScrewParam(Constant.PARA_COMPENSATE_X2, data, pt);
            data[0] = pt;
            data[1] = df;
             ctrlSvcImplObj.sendLeadScrewParam(Constant.PARA_COMPENSATE_X2i, data, 2);
              }
           };
    
    
    

    private int buildArrayData(DefaultTableModel tableModel, double[] arrayData) {
        int i = 0;
        int rowCount = tableModel.getRowCount();
        int colCount = tableModel.getColumnCount();
        for (int row = 0; row < rowCount; row++) {
            for (int col = 0; col < colCount; col++) {
                 if(col%2 !=0 ){
                 //it is value
                     //System.out.println("buildArrayData,row="+row+" col="+col);
                  Float newValue = null;
                  Object v = tableModel.getValueAt(row, col);
                  if(v!=null){
                    newValue = new Float( v.toString() );
                  } 
                  
                  if (newValue ==null) break;
                  arrayData[i] = newValue;
                  if (arrayData[i] < VALUE_LOWLIMIT || arrayData[i] > VALUE_UPPERLIMIT) {
                    JOptionPane.showMessageDialog(this, "数据超范围！");
                    return -1; //Some data is wrong
                }
                i++;
                }  
            }
        }
        return i;
    }
    
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(this.tableX2);
        try {
            this.paramListX2 = readListFromDB("X2");
        } catch (Throwable ex) {
            Logger.getLogger(LeadscrewCompensateParam.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadList2Table(this.paramListX2, (DefaultTableModel) this.tableX2.getModel());
        this.setCursor(Cursor.DEFAULT_CURSOR);
}//GEN-LAST:event_cancelBtnActionPerformed

    private void saveBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn1ActionPerformed
        // TODO add your handling code here:
        String paramName = "X11";
        this.ensureGetingCellNewValue(this.tableX11);
        DefaultTableModel tableModel = (DefaultTableModel) this.tableX11.getModel();

        //Prepare arrary to Trio
        double[] arrayData = new double[50];
        int pointNumber = buildArrayData(tableModel, arrayData);
        if (pointNumber == -1) {
            return;  //Some data input is wrong
        }

        this.setCursor(WAIT_CURSOR);
        if (this.paramListX11 == null) {
            List<CatDeviceparamValue> paramList = null;
            try {
                paramList = readListFromDB("X11");
            } catch (Throwable ex) {
                Logger.getLogger(LeadscrewCompensateParam.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (paramList != null && !paramList.isEmpty()) {
                ServiceLocator.getParameterService().deleteList(paramList);
            }
        }

        //wys?.这个地方先删除,紧接着又存储,会不会有问题呢?
        if (this.paramListX11 == null) {
            saveNewValues(tableModel, paramName);
        } else {
            updateNewValues(this.paramListX11, tableModel);
        }

        //Send data to Trio
        ctrlSvcImplObj.sendLeadScrewParam(Constant.PARA_COMPENSATE_X11, arrayData, pointNumber);

        arrayData[0] = pointNumber;
        arrayData[1] = Double.valueOf(tableModel.getValueAt(1, 0).toString()) - //补偿间距
                Double.valueOf(tableModel.getValueAt(0, 0).toString());
        ctrlSvcImplObj.sendLeadScrewParam(Constant.PARA_COMPENSATE_X11i, arrayData, 2);
        this.setCursor(DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn1ActionPerformed

    private void cancelBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn1ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(this.tableX11);
        try {
            this.paramListX11 = readListFromDB("X11");
        } catch (Throwable ex) {
            Logger.getLogger(LeadscrewCompensateParam.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadList2Table(this.paramListX11, (DefaultTableModel) this.tableX11.getModel());
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_cancelBtn1ActionPerformed

    private void saveBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn2ActionPerformed
        // TODO add your handling code here:
        String paramName = "Y11";
        this.ensureGetingCellNewValue(this.tableY11);
        DefaultTableModel tableModel = (DefaultTableModel) this.tableY11.getModel();

        //Prepare data to Trio
        double[] arrayData = new double[50];
        int pointNumber = buildArrayData(tableModel, arrayData);
        if (pointNumber == -1) {
            return;  //Some data input is wrong
        }

        this.setCursor(WAIT_CURSOR);
        if (this.paramListY11 == null) {
            List<CatDeviceparamValue> paramList = null;
            try {
                paramList = readListFromDB("Y11");
            } catch (Throwable ex) {
                Logger.getLogger(LeadscrewCompensateParam.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (paramList != null && !paramList.isEmpty()) {
                ServiceLocator.getParameterService().deleteList(paramList);
            }
        }

        //wys?.这个地方先删除,紧接着又存储,会不会有问题呢?
        if (this.paramListY11 == null) {
            saveNewValues(tableModel, paramName);
        } else {
            updateNewValues(paramListY11, tableModel);
        }

        //Send data to Trio
        ctrlSvcImplObj.sendLeadScrewParam(Constant.PARA_COMPENSATE_Y11, arrayData, pointNumber);

        arrayData[0] = pointNumber;
        arrayData[1] = Double.valueOf(tableModel.getValueAt(1, 0).toString()) - //补偿间距
                Double.valueOf(tableModel.getValueAt(0, 0).toString());
        ctrlSvcImplObj.sendLeadScrewParam(Constant.PARA_COMPENSATE_Y11i, arrayData, 2);
        this.setCursor(DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn2ActionPerformed

    private void cancelBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn2ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(this.tableY11);
        try {
            this.paramListY11 = readListFromDB("Y11");
        } catch (Throwable ex) {
            Logger.getLogger(LeadscrewCompensateParam.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadList2Table(this.paramListY11, (DefaultTableModel) this.tableY11.getModel());
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_cancelBtn2ActionPerformed

    private void jRadioButtonX11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonX11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonX11ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String textValue = null;
        textValue = jTextPointNumber1.getText().trim();
        boolean inputValid = CommonMethod.checkIntFromTextField(textValue, null);
        if (!inputValid || textValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "错误，请输入整数！");
            return;
        }
        //else
        int pointNumber = Integer.valueOf(textValue);
        if (pointNumber > 50) { //Max point number is 50
            pointNumber = 50;
            jTextPointNumber1.setText("50");
        } else if (pointNumber < 2) {//Min point number is 2
            pointNumber = 2;
            jTextPointNumber1.setText("2");
        }

        textValue = jTextStep1.getText().trim();
        inputValid = CommonMethod.checkIntFromTextField(textValue, null);
        if (!inputValid || textValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "错误，请输入整数！");
            return;
        }
        //else
        int step = Integer.valueOf(textValue);

        DefaultTableModel tableModel = null;

        if (jRadioButtonX11.isSelected()) {
            this.paramListX11 = null;
            tableModel = (DefaultTableModel) this.tableX11.getModel();
        } else if (jRadioButtonY11.isSelected()) {
            this.paramListY11 = null;
            tableModel = (DefaultTableModel) this.tableY11.getModel();
        }

        if (tableModel != null) {
            int current_idx = 0;
            for (int column = 0; column < tableModel.getColumnCount() / 2; column++) {
                for (int row = 0; row < 20; row++) {
                    if (current_idx < pointNumber) {
                        tableModel.setValueAt(current_idx * step, row, 2 * column);
                        tableModel.setValueAt(0, row, 2 * column + 1);
                    } else {
                        tableModel.setValueAt(null, row, 2 * column);
                        tableModel.setValueAt(null, row, 2 * column + 1);
                    }
                    current_idx++;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "请选择坐标轴！");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        pararScrew = null;
    }//GEN-LAST:event_formWindowClosing

    public void setParamIsUsed() {
        String typeName = "up_bed_position";
        List<CatDeviceparamValue> currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "down_bed_position";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "alter_focus_position";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "reference_position";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "reference_adjust";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "radiate_compensate";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "zero_position";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "manu_speed";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }

        typeName = "auto_speed";
        currentList = ServiceLocator.getParameterService().findByTypeName(typeName);
        if (currentList == null || currentList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: " + typeName, "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
            return;
        }
        //When the currentList is not empty
        for (int i = 0; i < currentList.size(); i++) {
            CatDeviceparamValue currentValue = currentList.get(i);
            if (currentValue.getUsed() == 0) {
                currentValue.setUsed((byte) 1);
                ServiceLocator.getParameterService().update(currentValue);
            }
        }
    }

    private void ensureGetingCellNewValue(JTable tb) {
        int col = tb.getEditingColumn();
        int row = tb.getEditingRow();
        if (col > -1 && row > -1) {
            tb.getCellEditor(row, col).stopCellEditing();
        }
    }

    private void saveNewValues(DefaultTableModel tableModel, String variableName) {
        int rowCount = tableModel.getRowCount();
        int arrayCount = tableModel.getColumnCount() / 2;

        for (int clmn = 0; clmn < arrayCount; clmn++) {
            for (int row = 0; row < rowCount; row++) {
                String newPosition = "";
                String newValue = "";
                if (tableModel.getValueAt(row, 2 * clmn) != null
                        && tableModel.getValueAt(row, 2 * clmn + 1) != null) {
                    newPosition = (String) tableModel.getValueAt(row, 2 * clmn).toString();
                    newValue = (String) tableModel.getValueAt(row, 2 * clmn + 1).toString();
                } else {
                    break;
                }

                boolean inputValid = CommonMethod.checkDoubleFromTextField(newValue, true);
                if (!inputValid) {
                    return;
                }

                CatDeviceparamValue newParamValue = new CatDeviceparamValue();
                CatDeviceparamType typeObj = ServiceLocator.getParameterTypeService().findByName("screw_compensate");
                //更新当前值
                newParamValue.setName(variableName);
                newParamValue.setCatDeviceparamType(typeObj);
                newParamValue.setPosition(Float.valueOf(newPosition.trim()));
                newParamValue.setValue(Float.valueOf(newValue.trim()));
                newParamValue.setUsed((byte) 0);
                newParamValue.setModifiedOn(new Date());
                if (SystemInfo.getCurrentUser() != null) {
                    newParamValue.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
                }
                ServiceLocator.getParameterService().save(newParamValue);
            }
        }
    }

    private void updateNewValues(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        long start =System.currentTimeMillis();
        int rowCount = tableModel.getRowCount();
        int columnCount = tableModel.getColumnCount();
        Float position = null;
        Float newValue = null;
        //String oldValue = null;
        for (int row = 0; row < rowCount; row++) {
          for (int col = 0; col < columnCount; col++) {
             int count = row * columnCount + col;
             int indexInParamList = count/2;
             if(col%2==0){
                 //it is position
                position = (Float) tableModel.getValueAt(row,col);
               }
             else {
                 //it is value
                newValue = new Float( tableModel.getValueAt(row, col).toString());
                CatDeviceparamValue oldParamValue = paramList.get(indexInParamList);
                float fOldValue = oldParamValue.getValue();
                //更新当前值
                if (Float.compare(newValue, fOldValue) != 0) {
                    System.out.println("position="+position +" oldvalue="+fOldValue+"  newvalue="+newValue) ;
                    oldParamValue.setValue(newValue);
                    oldParamValue.setUsed((byte) 1);
                    if(newValue==null)  oldParamValue.setUsed((byte) 0);
                    oldParamValue.setModifiedOn(new Date());
                    if (SystemInfo.getCurrentUser() != null) {
                        oldParamValue.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
                    }
                    ServiceLocator.getParameterService().update(oldParamValue);
                }

             }
           
            }

        }
       
        long end =System.currentTimeMillis();
        System.out.println("*****************************updatedata time="+(end-start) +" ms");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if (pararScrew == null) {
                    pararScrew = LeadscrewCompensateParam.getInstance();
                }
                pararScrew.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton cancelBtn1;
    private javax.swing.JButton cancelBtn2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButtonX11;
    private javax.swing.JRadioButton jRadioButtonY11;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextPointNumber;
    private javax.swing.JTextField jTextPointNumber1;
    private javax.swing.JTextField jTextStep;
    private javax.swing.JTextField jTextStep1;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton saveBtn1;
    private javax.swing.JButton saveBtn2;
    private javax.swing.JTable tableX11;
    private javax.swing.JTable tableX2;
    private javax.swing.JTable tableY11;
    // End of variables declaration//GEN-END:variables
    private static ControllerSvcImpl ctrlSvcImplObj = ControllerSvcImpl.getInstance();
    //private javax.swing.JTable tableX2;
}
