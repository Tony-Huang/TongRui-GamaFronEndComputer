/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChangeSourcePara.java
 *
 * Created on 2012-8-22, 16:11:23
 */
package com.tongrui.shangweiji.ui.parametersetting;

import com.tongrui.shangweiji.biz.ServiceLocator;
import com.tongrui.shangweiji.comm.Constant;
import com.tongrui.shangweiji.comm.ControllerSvcImpl;
import com.tongrui.shangweiji.data.CatDeviceparamType;
import com.tongrui.shangweiji.data.CatDeviceparamValue;
import common.CommonMethod;
import common.SystemInfo;
import java.awt.Dimension;
import java.awt.Font;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class ChangeSourcePara extends javax.swing.JFrame {
    
    private static ChangeSourcePara pararChgSource = null;
    
    public static ChangeSourcePara getInstance() {
        if(pararChgSource == null) {
            try {
                pararChgSource = new ChangeSourcePara();
            } catch (Throwable ex) {
                Logger.getLogger(ChangeSourcePara.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "本地数据库访问出错,请重试!");
            }
        }
        return pararChgSource;
    }

    private List<CatDeviceparamValue> paramList;
    private CatDeviceparamValue unitsCompensateDB = null;

    /** Creates new form ChangeSourcePara */
    public ChangeSourcePara() throws Throwable {
        initComponents();
        this.setLocationRelativeTo(null);

        Font font = new Font("宋体", Font.BOLD, 24);
        tableSourcePosition.getTableHeader().setFont(font);

        init2Tables();

        unitsCompensateDB = readCompensateDB();
        if (unitsCompensateDB != null) {
            jTextField1.setText(unitsCompensateDB.getValue().toString());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSourcePosition = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel1.setText("换源参数");
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setMinimumSize(new java.awt.Dimension(120, 59));
        jPanel2.setPreferredSize(new java.awt.Dimension(160, 449));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel2.setText("装源补偿(º)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        jPanel2.add(jLabel2, gridBagConstraints);

        jTextField1.setFont(new java.awt.Font("宋体", 0, 24));
        jTextField1.setMinimumSize(new java.awt.Dimension(40, 30));
        jTextField1.setPreferredSize(new java.awt.Dimension(80, 30));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel2.add(jTextField1, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_END);

        jPanel3.setMinimumSize(new java.awt.Dimension(153, 40));
        jPanel3.setPreferredSize(new java.awt.Dimension(769, 120));

        jButton1.setFont(new java.awt.Font("宋体", 0, 24));
        jButton1.setText("出厂值");
        jButton1.setMaximumSize(new java.awt.Dimension(150, 37));
        jButton1.setMinimumSize(new java.awt.Dimension(100, 37));
        jButton1.setPreferredSize(new java.awt.Dimension(130, 37));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        saveBtn.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn.setText("保存");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jPanel3.add(saveBtn);

        cancelBtn.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn.setText("放弃");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        jPanel3.add(cancelBtn);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tableSourcePosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableSourcePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "编号", "经度值(º)", "纬度值(º)", "编号", "经度值(º)", "纬度值(º)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSourcePosition.setColumnSelectionAllowed(true);
        tableSourcePosition.setRowHeight(40);
        tableSourcePosition.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableSourcePosition);
        tableSourcePosition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableSourcePosition.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableSourcePosition.getColumnModel().getColumn(0).setMaxWidth(140);
        tableSourcePosition.getColumnModel().getColumn(3).setPreferredWidth(100);
        tableSourcePosition.getColumnModel().getColumn(3).setMaxWidth(140);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init2Tables() throws Throwable {
        this.paramList = readListFromDB("T2Z2");
        loadList2Table(this.paramList, (DefaultTableModel) this.tableSourcePosition.getModel());
    }

    private List<CatDeviceparamValue> readListFromDB(String variableName) throws Throwable {
        String hql = "from CatDeviceparamValue as u where u.name = '" + variableName
                + "' and u.catDeviceparamType.name = 'renewal_source' order by u.position asc"; //desc is descrease order
        List<CatDeviceparamValue> paramList = ServiceLocator.getParameterService().findByHQL(hql);
        return paramList;
    }

    private CatDeviceparamValue readCompensateDB() {
        CatDeviceparamValue value = null;
        List<CatDeviceparamValue> valueList = ServiceLocator.getParameterService().findByTypeName("source_compensate");
        if (valueList != null && valueList.size() >= 1) {
            value = valueList.get(0); //In fact, valueList.size() can only be 0 or 1; 
        }
        return value;
    }

    private void loadList2Table(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        int rowCount = tableModel.getRowCount();
        int arrayCount = tableModel.getColumnCount() / 3;

        int i = 0;
        Integer num;
        for (int clmn = 0; clmn < arrayCount; clmn++) {
            for (int row = 0; row < rowCount; row++) {
                if (paramList == null || i >= paramList.size()) {
                    num = ++i;
                    tableModel.setValueAt(num.toString(), row, 3 * clmn);
                    tableModel.setValueAt("0.0", row, 3 * clmn + 1);
                    tableModel.setValueAt("0.0", row, 3 * clmn + 2);
                    continue;
                }

                CatDeviceparamValue param = paramList.get(i++);
                String number = "" + param.getPosition().intValue();
                String longitude = param.getValue().toString();
                String latitude = param.getValue2().toString();

                tableModel.setValueAt(number, row, 3 * clmn);
                tableModel.setValueAt(longitude, row, 3 * clmn + 1);
                tableModel.setValueAt(latitude, row, 3 * clmn + 2);
            }
        }
    }

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        String paramName = "T2Z2";
        this.ensureGetingCellNewValue(this.tableSourcePosition);

        //Save compensate to DB
        String st = jTextField1.getText().trim();
        boolean inputValid = CommonMethod.checkDoubleFromTextField(st, true);
        if (!inputValid) {
            return;
        }
        
        this.setCursor(WAIT_CURSOR);
        Float newValue = Float.valueOf(st);
        if(newValue < unitsCompensateDB.getLowlimit() || newValue > unitsCompensateDB.getUplimit()) {
            JOptionPane.showMessageDialog(this, "补偿值超范围！");
            return;
        }
        saveUnitsCompensate(newValue);

        //Save table to DB
        DefaultTableModel tableModel = (DefaultTableModel) this.tableSourcePosition.getModel();
        inputValid = checkTable(tableModel);
        if (!inputValid) {
            this.setCursor(DEFAULT_CURSOR);
            return;
        }
        
        if (this.paramList == null) {
            saveNewValues(tableModel, paramName);
        } else {
            updateNewValues(this.paramList, tableModel);
        }

        ctrlSvcImplObj.sendCommand(Constant.PARA_CHANGE_SOURCE_POS1, newValue);
        System.out.println("sendCommand(Constant.PARA_CHANGE_SOURCE_POS1");
        this.setCursor(DEFAULT_CURSOR);
}//GEN-LAST:event_saveBtnActionPerformed

    private void saveUnitsCompensate(Float newValue) {
        if (unitsCompensateDB != null) {
            //update
            if (Float.compare(unitsCompensateDB.getValue(), newValue) != 0) {
                unitsCompensateDB.setValue(newValue);
                unitsCompensateDB.setUsed((byte) 0);
                unitsCompensateDB.setModifiedOn(new Date());
                if (SystemInfo.getCurrentUser() != null) {
                    unitsCompensateDB.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
                }
                ServiceLocator.getParameterService().update(unitsCompensateDB);
            }
        } else {
            //save
            CatDeviceparamValue newUnitsCompensate = new CatDeviceparamValue();
            CatDeviceparamType typeObj = ServiceLocator.getParameterTypeService().findByName("source_compensate");
            //设定新值
            newUnitsCompensate.setName("T2Z2");
            newUnitsCompensate.setCatDeviceparamType(typeObj);
            newUnitsCompensate.setValue(newValue);
            newUnitsCompensate.setUsed((byte) 0);
            newUnitsCompensate.setModifiedOn(new Date());
            if (SystemInfo.getCurrentUser() != null) {
                newUnitsCompensate.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
            }
            ServiceLocator.getParameterService().save(newUnitsCompensate);
        }
    }

    private void updateNewValues(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        int rowCount = tableModel.getRowCount();
        int arrayCount = tableModel.getColumnCount() / 3;

        for (int clmn = 0; clmn < arrayCount; clmn++) {
            for (int row = 0; row < rowCount; row++) {
                String newNumber = (String) tableModel.getValueAt(row, 3 * clmn).toString();
                String newLongitude = (String) tableModel.getValueAt(row, 3 * clmn + 1).toString();
                String newLatitude = (String) tableModel.getValueAt(row, 3 * clmn + 2).toString();

                CatDeviceparamValue oldParamValue = paramList.get(row + clmn * rowCount);
                float fNewLongitude = Float.valueOf(newLongitude.trim());
                float fNewLatitude = Float.valueOf(newLatitude.trim());
                float fOldLongitude = oldParamValue.getValue();
                float fOldLatitude = oldParamValue.getValue2();

                //更新当前值
                if (Float.compare(fNewLongitude, fOldLongitude) != 0
                        || Float.compare(fNewLatitude, fOldLatitude) != 0) {
                    oldParamValue.setValue(fNewLongitude);
                    oldParamValue.setValue2(fNewLatitude);
                    oldParamValue.setUsed((byte) 0);
                    oldParamValue.setModifiedOn(new Date());
                    if (SystemInfo.getCurrentUser() != null) {
                        oldParamValue.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
                    }
                    ServiceLocator.getParameterService().update(oldParamValue);
                }
            }
        }
    }

    private void saveNewValues(DefaultTableModel tableModel, String variableName) {
        int rowCount = tableModel.getRowCount();
        int arrayCount = tableModel.getColumnCount() / 3;

        String hql = "from CatDeviceparamValue as u where u.catDeviceparamType.name = 'renewal_source'";
        List<CatDeviceparamValue> paramList = ServiceLocator.getParameterService().findByHQL(hql);
        if (paramList != null && !paramList.isEmpty()) {
            ServiceLocator.getParameterService().deleteList(paramList);
        }
        
        for (int clmn = 0; clmn < arrayCount; clmn++) {
            for (int row = 0; row < rowCount; row++) {
                String newNumber = (String) tableModel.getValueAt(row, 3 * clmn).toString();
                String newLongitude = (String) tableModel.getValueAt(row, 3 * clmn + 1).toString();
                String newLatitude = (String) tableModel.getValueAt(row, 3 * clmn + 2).toString();

                CatDeviceparamValue newParamValue = new CatDeviceparamValue();
                CatDeviceparamType typeObj = ServiceLocator.getParameterTypeService().findByName("renewal_source");
                //更新当前值
                newParamValue.setName(variableName);
                newParamValue.setCatDeviceparamType(typeObj);
                newParamValue.setPosition(Float.valueOf(newNumber.trim()));
                newParamValue.setValue(Float.valueOf(newLongitude.trim()));
                newParamValue.setValue2(Float.valueOf(newLatitude.trim()));
                newParamValue.setUsed((byte) 0);
                newParamValue.setModifiedOn(new Date());
                if (SystemInfo.getCurrentUser() != null) {
                    newParamValue.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
                } else {
                    newParamValue.setModifiedBy("Debuging");
                }
                ServiceLocator.getParameterService().save(newParamValue);
            }
        }
    }
    private boolean checkTable(DefaultTableModel tableModel) {
        int rowCount = tableModel.getRowCount();
        int arrayCount = tableModel.getColumnCount() / 3;
        Float value = null;

        for (int clmn = 0; clmn < arrayCount; clmn++) {
            for (int row = 0; row < rowCount; row++) {
                String newLongitude = (String) tableModel.getValueAt(row, 3 * clmn + 1).toString();
                String newLatitude = (String) tableModel.getValueAt(row, 3 * clmn + 2).toString();

                boolean inputValid = CommonMethod.checkDoubleFromTextField(newLongitude, true);
                if (!inputValid) {
                    return false;
                }
                inputValid = CommonMethod.checkDoubleFromTextField(newLatitude, true);
                if (!inputValid) {
                    return false;
                }
                
                value = Float.parseFloat(newLongitude);
                if(value < 0 || value > 360) {
                    JOptionPane.showMessageDialog(this, "数据超范围！");
                    return false; 
                }
                value = Float.parseFloat(newLatitude);
                if(value < 0 || value > 90) {
                    JOptionPane.showMessageDialog(this, "数据超范围！");
                    return false; 
                }
            }
        }
        return true;
    }
    
    private void ensureGetingCellNewValue(JTable tb) {
        int col = tb.getEditingColumn();
        int row = tb.getEditingRow();
        if (col > -1 && row > -1) {
            tb.getCellEditor(row, col).stopCellEditing();
        }
    }

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(this.tableSourcePosition);
        try {
            this.paramList = readListFromDB("T2Z2");
        } catch (Throwable e) {
            JOptionPane.showMessageDialog(this, "本地数据库访问出错,请重试!");
        }
        loadList2Table(this.paramList, (DefaultTableModel) this.tableSourcePosition.getModel());
        
        unitsCompensateDB = readCompensateDB();
        if (unitsCompensateDB != null) {
            jTextField1.setText(unitsCompensateDB.getValue().toString());
        }
}//GEN-LAST:event_cancelBtnActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (this.paramList != null && this.paramList.size() != 30) {
            ServiceLocator.getParameterService().deleteList(paramList);
        }
        this.paramList = null;

        DefaultTableModel tableModel = (DefaultTableModel) this.tableSourcePosition.getModel();
        int rowCount = tableModel.getRowCount();
        int arrayCount = tableModel.getColumnCount() / 3;

        int i = 0;
        Integer num;
        Float longitude;
        Float lititude;
        for (int clmn = 0; clmn < arrayCount; clmn++) {
            for (int row = 0; row < rowCount; row++) {
                num = ++i;
                longitude = new Float((1949 - i * 59) % 360);
                lititude = new Float(13 + num);

                tableModel.setValueAt(num.toString(), row, 3 * clmn);
                tableModel.setValueAt(longitude.toString(), row, 3 * clmn + 1);
                tableModel.setValueAt(lititude.toString(), row, 3 * clmn + 2);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        pararChgSource = null;
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if(pararChgSource == null) {
                    pararChgSource = ChangeSourcePara.getInstance();
                }
                pararChgSource.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTable tableSourcePosition;
    // End of variables declaration//GEN-END:variables
    private static ControllerSvcImpl ctrlSvcImplObj = ControllerSvcImpl.getInstance();
}
