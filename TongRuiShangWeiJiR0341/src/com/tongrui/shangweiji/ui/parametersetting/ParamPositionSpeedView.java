/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ParamPositionSpeedView.java
 *
 * Created on 2012-8-2, 17:45:34
 */
package com.tongrui.shangweiji.ui.parametersetting;

import com.tongrui.shangweiji.biz.ServiceLocator;
import com.tongrui.shangweiji.comm.Constant;
import com.tongrui.shangweiji.comm.ControllerSvcImpl;
import com.tongrui.shangweiji.data.CatDeviceparamValue;
import com.tongrui.shangweiji.data.CatDeviceparamValueHistory;
import common.CommonMethod;
import common.SystemInfo;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class ParamPositionSpeedView extends javax.swing.JFrame {
    
    private static ParamPositionSpeedView pararSetting = null;
    
    public static ParamPositionSpeedView getInstance() {
        if(pararSetting == null) {
            try {
                pararSetting = new ParamPositionSpeedView();
            } catch (Throwable ex) {
                Logger.getLogger(ParamPositionSpeedView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "本地数据库访问出错,请重试!");
            }
        }
        return pararSetting;
    }

    /** Creates new form ParamPositionSpeedView */
    public ParamPositionSpeedView() throws Throwable {
        initComponents();
        this.setLocationRelativeTo(null);

        //加上此行使得表在显示前装填数据
        this.initTableModle();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane19 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableUpBedPosition = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableInfoUpBedPosition = new javax.swing.JTable();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDownBedPosition = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableInfoDownBedPosition = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        saveBtn1 = new javax.swing.JButton();
        cancelBtn1 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableInfoAlterFocusPosition = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableAlterFocusPosition = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        saveBtn5 = new javax.swing.JButton();
        cancelBtn5 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        cancelBtn7 = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        tableInfoRadiateCompensate = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        tableRadiateCompensate = new javax.swing.JTable();
        saveBtn7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableReferencePosition = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableInfoReferencePosition = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        saveBtn2 = new javax.swing.JButton();
        cancelBtn2 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableReferenceAdjust = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        tableInfoReferenceAdjust = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        saveBtn6 = new javax.swing.JButton();
        cancelBtn6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableZeroPosition = new javax.swing.JTable();
        saveBtn3 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableInfoZeroPosition = new javax.swing.JTable();
        cancelBtn3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        saveBtn9 = new javax.swing.JButton();
        cancelBtn9 = new javax.swing.JButton();
        jScrollPane20 = new javax.swing.JScrollPane();
        tableAxlesRange = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tableInfoManuSpeed = new javax.swing.JTable();
        cancelBtn4 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tableManuSpeed = new javax.swing.JTable();
        saveBtn4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        tableInfoAutoSpeed = new javax.swing.JTable();
        saveBtn8 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cancelBtn8 = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        tableAutoSpeed = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel5.setPreferredSize(new java.awt.Dimension(1500, 1000));
        jPanel5.setRequestFocusEnabled(false);
        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("位置和速度参数");
        jPanel5.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.setToolTipText("tab1");
        jTabbedPane1.setFocusable(false);
        jTabbedPane1.setFont(new java.awt.Font("宋体", 0, 18));

        jPanel1.setLayout(new java.awt.GridLayout(2, 3, 5, 10));

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));
        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableUpBedPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableUpBedPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUpBedPosition.setColumnSelectionAllowed(true);
        tableUpBedPosition.setRowHeight(40);
        tableUpBedPosition.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableUpBedPosition);
        tableUpBedPosition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableUpBedPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableUpBedPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        tableInfoUpBedPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoUpBedPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoUpBedPosition.setAutoscrolls(false);
        tableInfoUpBedPosition.setEnabled(false);
        tableInfoUpBedPosition.setRowHeight(40);
        jScrollPane2.setViewportView(tableInfoUpBedPosition);
        tableInfoUpBedPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoUpBedPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        saveBtn.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn.setText("保存");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        cancelBtn.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn.setText("放弃");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel2.setText("上床位置参数");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(saveBtn)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cancelBtn)
                    .addComponent(saveBtn))
                .addContainerGap())
        );

        jPanel1.add(jPanel8);

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));
        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableDownBedPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableDownBedPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDownBedPosition.setColumnSelectionAllowed(true);
        tableDownBedPosition.setRowHeight(40);
        tableDownBedPosition.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableDownBedPosition);
        tableDownBedPosition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableDownBedPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableDownBedPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        tableInfoDownBedPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoDownBedPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoDownBedPosition.setAutoscrolls(false);
        tableInfoDownBedPosition.setEnabled(false);
        tableInfoDownBedPosition.setRowHeight(40);
        jScrollPane4.setViewportView(tableInfoDownBedPosition);
        tableInfoDownBedPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoDownBedPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        jLabel3.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel3.setText("下床位置参数");

        saveBtn1.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn1.setText("保存");
        saveBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn1ActionPerformed(evt);
            }
        });

        cancelBtn1.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn1.setText("放弃");
        cancelBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(saveBtn1)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn1)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cancelBtn1)
                    .addComponent(saveBtn1))
                .addContainerGap())
        );

        jPanel1.add(jPanel9);

        jPanel10.setBackground(new java.awt.Color(204, 204, 204));
        jPanel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableInfoAlterFocusPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoAlterFocusPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoAlterFocusPosition.setAutoscrolls(false);
        tableInfoAlterFocusPosition.setEnabled(false);
        tableInfoAlterFocusPosition.setRowHeight(40);
        jScrollPane12.setViewportView(tableInfoAlterFocusPosition);
        tableInfoAlterFocusPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoAlterFocusPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        tableAlterFocusPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableAlterFocusPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAlterFocusPosition.setColumnSelectionAllowed(true);
        tableAlterFocusPosition.setRowHeight(40);
        tableAlterFocusPosition.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(tableAlterFocusPosition);
        tableAlterFocusPosition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableAlterFocusPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableAlterFocusPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        jLabel7.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel7.setText("换靶位置参数");

        saveBtn5.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn5.setText("保存");
        saveBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn5ActionPerformed(evt);
            }
        });

        cancelBtn5.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn5.setText("放弃");
        cancelBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(saveBtn5)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn5))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cancelBtn5)
                    .addComponent(saveBtn5))
                .addContainerGap())
        );

        jPanel1.add(jPanel10);

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cancelBtn7.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn7.setText("放弃");
        cancelBtn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn7ActionPerformed(evt);
            }
        });

        tableInfoRadiateCompensate.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoRadiateCompensate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoRadiateCompensate.setAutoscrolls(false);
        tableInfoRadiateCompensate.setEnabled(false);
        tableInfoRadiateCompensate.setRowHeight(40);
        jScrollPane16.setViewportView(tableInfoRadiateCompensate);
        tableInfoRadiateCompensate.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoRadiateCompensate.getColumnModel().getColumn(0).setMaxWidth(160);

        tableRadiateCompensate.setFont(new java.awt.Font("宋体", 0, 24));
        tableRadiateCompensate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "准直器号", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRadiateCompensate.setColumnSelectionAllowed(true);
        tableRadiateCompensate.setRowHeight(40);
        tableRadiateCompensate.getTableHeader().setReorderingAllowed(false);
        jScrollPane15.setViewportView(tableRadiateCompensate);
        tableRadiateCompensate.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableRadiateCompensate.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableRadiateCompensate.getColumnModel().getColumn(0).setMaxWidth(160);

        saveBtn7.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn7.setText("保存");
        saveBtn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn7ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel9.setText("照射时间补偿");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(saveBtn7)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn7)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn7)
                    .addComponent(saveBtn7)
                    .addComponent(jLabel9))
                .addContainerGap())
        );

        jPanel1.add(jPanel13);

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));
        jPanel11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableReferencePosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableReferencePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReferencePosition.setColumnSelectionAllowed(true);
        tableReferencePosition.setRowHeight(40);
        tableReferencePosition.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tableReferencePosition);
        tableReferencePosition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableReferencePosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableReferencePosition.getColumnModel().getColumn(0).setMaxWidth(160);

        tableInfoReferencePosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoReferencePosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoReferencePosition.setAutoscrolls(false);
        tableInfoReferencePosition.setEnabled(false);
        tableInfoReferencePosition.setRowHeight(40);
        jScrollPane6.setViewportView(tableInfoReferencePosition);
        tableInfoReferencePosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoReferencePosition.getColumnModel().getColumn(0).setMaxWidth(160);

        jLabel4.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel4.setText("参考点座标");

        saveBtn2.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn2.setText("保存");
        saveBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn2ActionPerformed(evt);
            }
        });

        cancelBtn2.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn2.setText("放弃");
        cancelBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                        .addComponent(saveBtn2)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn2))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn2)
                    .addComponent(saveBtn2)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        jPanel1.add(jPanel11);

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableReferenceAdjust.setFont(new java.awt.Font("宋体", 0, 24));
        tableReferenceAdjust.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReferenceAdjust.setColumnSelectionAllowed(true);
        tableReferenceAdjust.setRowHeight(40);
        tableReferenceAdjust.getTableHeader().setReorderingAllowed(false);
        jScrollPane13.setViewportView(tableReferenceAdjust);
        tableReferenceAdjust.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableReferenceAdjust.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableReferenceAdjust.getColumnModel().getColumn(0).setMaxWidth(160);

        tableInfoReferenceAdjust.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoReferenceAdjust.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoReferenceAdjust.setAutoscrolls(false);
        tableInfoReferenceAdjust.setEnabled(false);
        tableInfoReferenceAdjust.setRowHeight(40);
        jScrollPane14.setViewportView(tableInfoReferenceAdjust);
        tableInfoReferenceAdjust.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoReferenceAdjust.getColumnModel().getColumn(0).setMaxWidth(160);

        jLabel8.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel8.setText("参考点补偿(不用了)");

        saveBtn6.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn6.setText("保存");
        saveBtn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn6ActionPerformed(evt);
            }
        });

        cancelBtn6.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn6.setText("放弃");
        cancelBtn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(saveBtn6)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn6))
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn6)
                    .addComponent(saveBtn6)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        jPanel1.add(jPanel12);

        jTabbedPane1.addTab("标签1", jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 3, 5, 20));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableZeroPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableZeroPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableZeroPosition.setColumnSelectionAllowed(true);
        tableZeroPosition.setRowHeight(40);
        tableZeroPosition.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tableZeroPosition);
        tableZeroPosition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableZeroPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableZeroPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        saveBtn3.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn3.setText("保存");
        saveBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn3ActionPerformed(evt);
            }
        });

        tableInfoZeroPosition.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoZeroPosition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoZeroPosition.setAutoscrolls(false);
        tableInfoZeroPosition.setEnabled(false);
        tableInfoZeroPosition.setRowHeight(40);
        jScrollPane8.setViewportView(tableInfoZeroPosition);
        tableInfoZeroPosition.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoZeroPosition.getColumnModel().getColumn(0).setMaxWidth(160);

        cancelBtn3.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn3.setText("放弃");
        cancelBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel5.setText("零位补偿参数");

        jLabel11.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel11.setText("各轴范围(不可更改)");

        saveBtn9.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn9.setText("保存");
        saveBtn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn9ActionPerformed(evt);
            }
        });

        cancelBtn9.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn9.setText("放弃");
        cancelBtn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn9ActionPerformed(evt);
            }
        });

        tableAxlesRange.setFont(new java.awt.Font("宋体", 0, 24));
        tableAxlesRange.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "最小值(mm)", "最大值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAxlesRange.setColumnSelectionAllowed(true);
        tableAxlesRange.setRowHeight(40);
        tableAxlesRange.getTableHeader().setReorderingAllowed(false);
        jScrollPane20.setViewportView(tableAxlesRange);
        tableAxlesRange.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableAxlesRange.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableAxlesRange.getColumnModel().getColumn(0).setMaxWidth(160);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane20, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addComponent(saveBtn3)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(saveBtn9)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel11)
                        .addGap(31, 31, 31)
                        .addComponent(cancelBtn9)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cancelBtn3)
                    .addComponent(saveBtn3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn9)
                    .addComponent(cancelBtn9)
                    .addComponent(jLabel11))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3);

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableInfoManuSpeed.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoManuSpeed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoManuSpeed.setAutoscrolls(false);
        tableInfoManuSpeed.setEnabled(false);
        tableInfoManuSpeed.setRowHeight(40);
        jScrollPane10.setViewportView(tableInfoManuSpeed);
        tableInfoManuSpeed.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoManuSpeed.getColumnModel().getColumn(0).setMaxWidth(160);

        cancelBtn4.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn4.setText("放弃");
        cancelBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn4ActionPerformed(evt);
            }
        });

        tableManuSpeed.setFont(new java.awt.Font("宋体", 0, 24));
        tableManuSpeed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableManuSpeed.setColumnSelectionAllowed(true);
        tableManuSpeed.setRowHeight(40);
        tableManuSpeed.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(tableManuSpeed);
        tableManuSpeed.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableManuSpeed.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableManuSpeed.getColumnModel().getColumn(0).setMaxWidth(160);

        saveBtn4.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn4.setText("保存");
        saveBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn4ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel6.setText("手动速度");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                        .addComponent(saveBtn4)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn4)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cancelBtn4)
                    .addComponent(saveBtn4))
                .addContainerGap(435, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel4);

        jPanel14.setBackground(new java.awt.Color(204, 204, 204));
        jPanel14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tableInfoAutoSpeed.setFont(new java.awt.Font("宋体", 0, 24));
        tableInfoAutoSpeed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ));
        tableInfoAutoSpeed.setAutoscrolls(false);
        tableInfoAutoSpeed.setEnabled(false);
        tableInfoAutoSpeed.setRowHeight(40);
        jScrollPane18.setViewportView(tableInfoAutoSpeed);
        tableInfoAutoSpeed.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableInfoAutoSpeed.getColumnModel().getColumn(0).setMaxWidth(160);

        saveBtn8.setFont(new java.awt.Font("宋体", 0, 24));
        saveBtn8.setText("保存");
        saveBtn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn8ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("宋体", 0, 24));
        jLabel10.setText("自动速度");

        cancelBtn8.setFont(new java.awt.Font("宋体", 0, 24));
        cancelBtn8.setText("放弃");
        cancelBtn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn8ActionPerformed(evt);
            }
        });

        tableAutoSpeed.setFont(new java.awt.Font("宋体", 0, 24));
        tableAutoSpeed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "轴名", "上次使用值(mm)", "当前值(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAutoSpeed.setColumnSelectionAllowed(true);
        tableAutoSpeed.setRowHeight(40);
        tableAutoSpeed.getTableHeader().setReorderingAllowed(false);
        jScrollPane17.setViewportView(tableAutoSpeed);
        tableAutoSpeed.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableAutoSpeed.getColumnModel().getColumn(0).setPreferredWidth(120);
        tableAutoSpeed.getColumnModel().getColumn(0).setMaxWidth(160);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                        .addComponent(saveBtn8)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn8)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn8)
                    .addComponent(saveBtn8)
                    .addComponent(jLabel10))
                .addContainerGap(437, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel14);

        jTabbedPane1.addTab("标签2", jPanel2);

        jPanel5.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jScrollPane19.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1516, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1025, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveNewValues(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        int rowCount = tableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            CatDeviceparamValue originalParamValue = paramList.get(i);
            String currOldValue = "";
            if (originalParamValue.getValue() != null) {
                currOldValue = originalParamValue.getValue().toString();
            }

            String currNewValue = "";
            if (tableModel.getValueAt(i, 2) != null) {
                currNewValue = (String) tableModel.getValueAt(i, 2);
            }

            System.out.println("==========================---------->old=" + currOldValue + "; new=" + currNewValue);
            //如果用户改变了当前值
            if (!currNewValue.equals(currOldValue)) {
                //存档历史数据,用到原数据中的CreatedBy,CreatedOn,Used等信息
                CatDeviceparamValueHistory his = new CatDeviceparamValueHistory();
                his.setName(originalParamValue.getName());
                his.setCatDeviceparamValue(originalParamValue);
                his.setValue(originalParamValue.getValue());
                his.setCreatedOn(originalParamValue.getCreatedOn());
                his.setCreatedBy(originalParamValue.getCreatedBy());
                his.setModifiedOn(originalParamValue.getModifiedOn());
                his.setModifiedBy(originalParamValue.getModifiedBy());
                his.setUsed(originalParamValue.getUsed());
                ServiceLocator.getParameterHistoryService().save(his);
                System.out.println("存档历史数据, success");
                //更新当前值
                originalParamValue.setValue(Float.valueOf(currNewValue.trim()));
                originalParamValue.setUsed((byte) 0);
                originalParamValue.setModifiedOn(new Date());
                if (SystemInfo.getCurrentUser() != null) {
                    originalParamValue.setModifiedBy(SystemInfo.getCurrentUser().getUserName());
                }
                ServiceLocator.getParameterService().update(originalParamValue);
                System.out.println("更新当前值, success");
            }
        }
    }

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        //positionSpeedListTable.
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableUpBedPosition);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("up_bed_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableUpBedPosition.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }
        
        //Save data to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 4; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_UP_BED_POS, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoUpBedPosition.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtnActionPerformed

    public void ensureGetingCellNewValue(JTable tb) {
        int col = tb.getEditingColumn();
        int row = tb.getEditingRow();
        if (col > -1 && row > -1) {
            tb.getCellEditor(row, col).stopCellEditing();
        }
    }

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableUpBedPosition);
        paramList = ServiceLocator.getParameterService().findByTypeName("up_bed_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableUpBedPosition.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void saveBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn1ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableDownBedPosition);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("down_bed_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableDownBedPosition.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save data to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 4; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_DOWN_BED_POS, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoUpBedPosition.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn1ActionPerformed

    private void cancelBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn1ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableDownBedPosition);
        paramList = ServiceLocator.getParameterService().findByTypeName("down_bed_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableDownBedPosition.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn1ActionPerformed

    private void saveBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn2ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableReferencePosition);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("reference_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableReferencePosition.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 3; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_REF_POINT_POS, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoUpBedPosition.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn2ActionPerformed

    private void cancelBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn2ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableReferencePosition);
        paramList = ServiceLocator.getParameterService().findByTypeName("reference_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableReferencePosition.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn2ActionPerformed

    private void saveBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn3ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableZeroPosition);
         
       paramList = ServiceLocator.getParameterService().findByTypeName("zero_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableZeroPosition.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 8; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_ZERO_BIAS, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoUpBedPosition.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn3ActionPerformed

    private void cancelBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn3ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableZeroPosition);
        paramList = ServiceLocator.getParameterService().findByTypeName("zero_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableZeroPosition.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn3ActionPerformed

    private void cancelBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn4ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableManuSpeed);
        paramList = ServiceLocator.getParameterService().findByTypeName("manu_speed");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableManuSpeed.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
}//GEN-LAST:event_cancelBtn4ActionPerformed

    private void saveBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn4ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableManuSpeed);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("manu_speed");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableManuSpeed.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 8; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_MANUL_SPEED, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoManuSpeed.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
}//GEN-LAST:event_saveBtn4ActionPerformed

    private void saveBtn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn5ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableAlterFocusPosition);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("alter_focus_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableAlterFocusPosition.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 4; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_CHANGE_FOCUS_POS, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.getTableInfoAlterFocusPosition().getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn5ActionPerformed

    private void cancelBtn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn5ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableAlterFocusPosition);
        paramList = ServiceLocator.getParameterService().findByTypeName("alter_focus_position");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableAlterFocusPosition.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn5ActionPerformed

    private void saveBtn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn6ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableReferenceAdjust);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("reference_adjust");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableReferenceAdjust.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 3; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_REF_POINT_ADJ, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoReferenceAdjust.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn6ActionPerformed

    private void cancelBtn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn6ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableReferenceAdjust);
        paramList = ServiceLocator.getParameterService().findByTypeName("reference_adjust");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableReferenceAdjust.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn6ActionPerformed

    private void saveBtn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn7ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableRadiateCompensate);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("radiate_compensate");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableRadiateCompensate.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 4; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_RADIO_COMPENSATE, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoRadiateCompensate.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn7ActionPerformed

    private void cancelBtn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn7ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableRadiateCompensate);
        paramList = ServiceLocator.getParameterService().findByTypeName("radiate_compensate");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableRadiateCompensate.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn7ActionPerformed

    private void saveBtn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn8ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableAutoSpeed);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("auto_speed");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableAutoSpeed.getModel();

        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }

        if (!CommonMethod.tableCheckRange(tableModel, 2, paramList)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            JOptionPane.showMessageDialog(this, "数据超范围,存储失败！");
            return;
        }

        //Save to DB
        saveNewValues(paramList, tableModel);

        //Send data to low-computer
        for (int i = 0; i < 8; i++) {
            ctrlSvcImplObj.sendBedParam(Constant.PARA_AUTO_SPEED, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        }

        //Update table display
        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely

        tableModel = (DefaultTableModel) this.tableInfoAutoSpeed.getModel();
        tableModel.setRowCount(0);
        fillInfoTable(paramList, tableModel);
        this.setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_saveBtn8ActionPerformed

    private void cancelBtn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn8ActionPerformed
        // TODO add your handling code here:
        this.ensureGetingCellNewValue(tableAutoSpeed);
        paramList = ServiceLocator.getParameterService().findByTypeName("auto_speed");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableAutoSpeed.getModel();

        tableModel.setRowCount(0);
        fillParamTable(paramList, tableModel);//wys?. can't update immedialtely
    }//GEN-LAST:event_cancelBtn8ActionPerformed

    private void cancelBtn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelBtn9ActionPerformed

    private void saveBtn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn9ActionPerformed
        // TODO add your handling code here:
        this.setCursor(Cursor.WAIT_CURSOR);
        this.ensureGetingCellNewValue(tableAxlesRange);
        
        paramList = ServiceLocator.getParameterService().findByTypeName("axiles_range");
        DefaultTableModel tableModel = (DefaultTableModel) this.tableAxlesRange.getModel();
        
        if (!CommonMethod.tableCheckValid(tableModel, 1)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }
        if (!CommonMethod.tableCheckValid(tableModel, 2)) {
            this.setCursor(Cursor.DEFAULT_CURSOR);
            return;
        }
        
        //Save to DB
        //saveNewValues;
        
        //WYS.Need send data to low-computer?
        //        for (int i = 0; i < 8; i++) {
        //            ctrlSvcImplObj.sendBedParam(Constant.PARA_AUTO_SPEED, (String) tableModel.getValueAt(i, 0), Double.valueOf((String) tableModel.getValueAt(i, 2)));
        //        }
        this.setCursor(Cursor.DEFAULT_CURSOR);
}//GEN-LAST:event_saveBtn9ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        pararSetting = null;
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                if (pararSetting == null) {
                    pararSetting = ParamPositionSpeedView.getInstance();
                }
                pararSetting.setVisible(true);
            }
        });
    }

    private void initTableModle() throws Throwable {
        tableUpBedPosition.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableDownBedPosition.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableAlterFocusPosition.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableAutoSpeed.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableManuSpeed.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableRadiateCompensate.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableReferenceAdjust.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableReferencePosition.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableZeroPosition.getTableHeader().setFont(new Font("宋体", 0, 24));
        tableAxlesRange.getTableHeader().setFont(new Font("宋体", 0, 24));

        //wys.Range table
        jScrollPane20.setVisible(true); //tableAxlesRange is unVisible
        jLabel11.setVisible(true);
        saveBtn9.setVisible(false);
        cancelBtn9.setVisible(false);

        loadRows2PositionSpeedListTable();
    }
    private List<CatDeviceparamValue> paramList;

    public void fillInfoTable(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        CatDeviceparamValue latestCurValue = null;
        CatDeviceparamValueHistory latestHisValue = null;

        for (int i = 0; i < paramList.size(); i++) {
            CatDeviceparamValue currentValue = paramList.get(i);

            //Get the latest current value
            if (latestCurValue == null) {
                latestCurValue = currentValue;
            } else {
                Date latest = latestCurValue.getModifiedOn(), current = currentValue.getModifiedOn();
                if (current != null && latest != null && current.after(latest)) {
                    latestCurValue = currentValue;
                }
            }

            //Find the latest used varible
            Iterator<CatDeviceparamValueHistory> it = currentValue.getCatDeviceparamValueHistories().iterator();
            while (it.hasNext()) {
                CatDeviceparamValueHistory hv = it.next();
                if (hv.getUsed() != 0) {
                    if (latestHisValue == null) {
                        latestHisValue = hv;
                    } else {
                        Date current = hv.getModifiedOn(), latest = latestHisValue.getModifiedOn();
                        if (current != null && latest != null && current.after(latest)) {
                            latestHisValue = hv;
                        }
                    }
                }
            }
        }


        Object[] oneRow = new Object[3];
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");

        oneRow[0] = "修改人"; //!!!本地数据库中修改人不能为空
        if (latestHisValue == null) {
            oneRow[1] = "";
        } else {
            oneRow[1] = latestHisValue.getModifiedBy();
        }
        oneRow[2] = latestCurValue.getModifiedBy();
        tableModel.addRow(oneRow);

        oneRow[0] = "修改时间";//!!!本地数据库中修改时间不能为空
        if (latestHisValue == null) {
            oneRow[1] = "";
        } else {
            oneRow[1] = formatter.format(latestHisValue.getModifiedOn());
        }
        if (latestCurValue.getModifiedOn() != null) {
            oneRow[2] = formatter.format(latestCurValue.getModifiedOn());
        } else {  //本地数据库中修改时间为空时,防止程序运行出错.
            oneRow[2] = "";
        }
        tableModel.addRow(oneRow);
    }

    private void fillParamTable(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        for (int i = 0; i < paramList.size(); i++) {
            CatDeviceparamValue param = paramList.get(i);
            String name = param.getName();
            String value = "";
            if (param.getValue() != null) {
                value = param.getValue().toString();
            }

            String historyValue = "";
            //找最近的历史值
            CatDeviceparamValueHistory latestHisValue = this.getLatestUsedHistory(param.getCatDeviceparamValueHistories());
            if (latestHisValue != null) {
                historyValue = latestHisValue.getValue().toString();
            }

            Object[] oneRow = new Object[3];
            oneRow[0] = name;
            oneRow[1] = historyValue;
            oneRow[2] = value;
            tableModel.addRow(oneRow);
        }
    }

    private void fillRangeTable(List<CatDeviceparamValue> paramList, DefaultTableModel tableModel) {
        for (int i = 0; i < paramList.size(); i++) {
            CatDeviceparamValue param = paramList.get(i);
            String name = param.getName();
            String upLimit = "";
            String lowLimit = "";
            if (param.getUplimit() != null) {
                upLimit = param.getUplimit().toString();
            }
            if (param.getLowlimit() != null) {
                lowLimit = param.getLowlimit().toString();
            }

            Object[] oneRow = new Object[3];
            oneRow[0] = name;
            oneRow[1] = lowLimit;
            oneRow[2] = upLimit;
            tableModel.addRow(oneRow);
        }
    }

    public void loadRows2PositionSpeedListTable() throws Throwable {
        paramList = ServiceLocator.getParameterService().findByTypeName("up_bed_position");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: up_bed_position", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableUpBedPosition.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoUpBedPosition.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("down_bed_position");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: down_bed_position", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableDownBedPosition.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoDownBedPosition.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("alter_focus_position");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: alter_focus_position", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.getTableAlterFocusPosition().getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.getTableInfoAlterFocusPosition().getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("reference_position");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: reference_position", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableReferencePosition.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoReferencePosition.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("reference_adjust");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: reference_adjust", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableReferenceAdjust.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoReferenceAdjust.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("radiate_compensate");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: radiate_compensate", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableRadiateCompensate.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoRadiateCompensate.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("zero_position");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: zero_position", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableZeroPosition.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoZeroPosition.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("manu_speed");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: manu_speed", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableManuSpeed.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoManuSpeed.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("auto_speed");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: auto_speed", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableAutoSpeed.getModel();
            fillParamTable(paramList, tableModel);

            tableModel = (DefaultTableModel) this.tableInfoAutoSpeed.getModel();
            fillInfoTable(paramList, tableModel);
        }

        paramList = ServiceLocator.getParameterService().findByTypeName("axiles_range");
        if (paramList == null || paramList.isEmpty()) {
            JDialog errDlg = new JDialog(this, false);
            JOptionPane.showMessageDialog(errDlg, "can't find device parameter: axiles_range", "Error Message", JOptionPane.ERROR_MESSAGE);
            errDlg.setVisible(true);
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) this.tableAxlesRange.getModel();
            fillRangeTable(paramList, tableModel);
        }
    }

    public JTable getTableAlterFocusPosition() {
        return tableAlterFocusPosition;
    }

    public void setTableAlterFocusPosition(JTable tableAlterFocusPosition) {
        this.tableAlterFocusPosition = tableAlterFocusPosition;
    }

    public JTable getTableInfoAlterFocusPosition() {
        return tableInfoAlterFocusPosition;
    }

    public void setTableInfoAlterFocusPosition(JTable tableInfoAlterFocusPosition) {
        this.tableInfoAlterFocusPosition = tableInfoAlterFocusPosition;
    }

    public CatDeviceparamValueHistory getLatestHistoryValue(Set hisSet) {
        CatDeviceparamValueHistory latestHisValue = null;
        Iterator<CatDeviceparamValueHistory> it = hisSet.iterator();
        while (it.hasNext()) {
            CatDeviceparamValueHistory hv = it.next();
            if (latestHisValue == null) {
                latestHisValue = hv;
            }
            Date current = hv.getModifiedOn(), latest = latestHisValue.getModifiedOn();
            if (current != null && latest != null && current.compareTo(latest) > 0) {
                latestHisValue = hv;
            }
        }
        return latestHisValue;
    }

    public CatDeviceparamValueHistory getLatestUsedHistory(Set hisSet) {
        CatDeviceparamValueHistory latestUsedHis = null;
        Iterator<CatDeviceparamValueHistory> it = hisSet.iterator();
        while (it.hasNext()) {
            CatDeviceparamValueHistory hv = it.next();
            if (hv.getUsed() != 0) {
                if (latestUsedHis == null) {
                    latestUsedHis = hv;
                }
                Date current = hv.getModifiedOn(), latest = latestUsedHis.getModifiedOn();
                if (current != null && latest != null && current.compareTo(latest) > 0) {
                    latestUsedHis = hv;
                }
            }
        }
        return latestUsedHis;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton cancelBtn1;
    private javax.swing.JButton cancelBtn2;
    private javax.swing.JButton cancelBtn3;
    private javax.swing.JButton cancelBtn4;
    private javax.swing.JButton cancelBtn5;
    private javax.swing.JButton cancelBtn6;
    private javax.swing.JButton cancelBtn7;
    private javax.swing.JButton cancelBtn8;
    private javax.swing.JButton cancelBtn9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton saveBtn1;
    private javax.swing.JButton saveBtn2;
    private javax.swing.JButton saveBtn3;
    private javax.swing.JButton saveBtn4;
    private javax.swing.JButton saveBtn5;
    private javax.swing.JButton saveBtn6;
    private javax.swing.JButton saveBtn7;
    private javax.swing.JButton saveBtn8;
    private javax.swing.JButton saveBtn9;
    private javax.swing.JTable tableAlterFocusPosition;
    private javax.swing.JTable tableAutoSpeed;
    private javax.swing.JTable tableAxlesRange;
    private javax.swing.JTable tableDownBedPosition;
    private javax.swing.JTable tableInfoAlterFocusPosition;
    private javax.swing.JTable tableInfoAutoSpeed;
    private javax.swing.JTable tableInfoDownBedPosition;
    private javax.swing.JTable tableInfoManuSpeed;
    private javax.swing.JTable tableInfoRadiateCompensate;
    private javax.swing.JTable tableInfoReferenceAdjust;
    private javax.swing.JTable tableInfoReferencePosition;
    private javax.swing.JTable tableInfoUpBedPosition;
    private javax.swing.JTable tableInfoZeroPosition;
    private javax.swing.JTable tableManuSpeed;
    private javax.swing.JTable tableRadiateCompensate;
    private javax.swing.JTable tableReferenceAdjust;
    private javax.swing.JTable tableReferencePosition;
    private javax.swing.JTable tableUpBedPosition;
    private javax.swing.JTable tableZeroPosition;
    // End of variables declaration//GEN-END:variables
    private static ControllerSvcImpl ctrlSvcImplObj = ControllerSvcImpl.getInstance();
}
