/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tongrui.shangweiji.ui.usermanagement;

import com.tongrui.shangweiji.biz.ServiceLocator;
import com.tongrui.shangweiji.biz.UserService;
import com.tongrui.shangweiji.data.CatAccUser;
import java.awt.Cursor;
import java.awt.Font;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class UserView extends JFrame {

    public static ResourceBundle resources = ResourceBundle.getBundle("resources_cn");

    /**
     * Creates new form UserView
     */
    private UserView() {
        initComponents();
        initTableModel();
        Font ft = new Font("宋体", 0, 24);
        userListTable.getTableHeader().setFont(ft);
        userListTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.setLocationRelativeTo(null);
    }
    private static UserView instance = new UserView();

    public static UserView getInstance() {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        userListTable = new javax.swing.JTable();
        newUserBtn = new javax.swing.JButton();
        deleteUserBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);

        jScrollPane1.setBorder(null);
        jScrollPane1.setFont(new java.awt.Font("宋体", 0, 24));

        userListTable.setAutoCreateRowSorter(true);
        userListTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        userListTable.setFont(new java.awt.Font("宋体", 0, 24));
        userListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "用户名", "类别", "使能"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userListTable.setRowHeight(40);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, userListTable, org.jdesktop.beansbinding.ObjectProperty.create(), userListTable, org.jdesktop.beansbinding.BeanProperty.create("elements"), "userList");
        bindingGroup.addBinding(binding);
        binding.bind();
        jScrollPane1.setViewportView(userListTable);

        newUserBtn.setFont(new java.awt.Font("宋体", 0, 24));
        newUserBtn.setText(resources.getString("btn.add")); // NOI18N
        newUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUserBtnActionPerformed(evt);
            }
        });

        deleteUserBtn.setFont(new java.awt.Font("宋体", 0, 24));
        deleteUserBtn.setText(resources.getString("btn.delete")); // NOI18N
        deleteUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(newUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(deleteUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteUserBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(newUserBtn))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserBtnActionPerformed
        // TODO add your handling code here:
        System.out.println("----action------to delete user......");
        int[] selectRows = this.userListTable.getSelectedRows();
        if(selectRows.length == 0) {
            return; //if none is selected
        }
        int result = JOptionPane.showConfirmDialog(this, "确定要删除吗?");
        if(result != 0) {
            return; //if not Yes
        } 
                
        this.setCursor(Cursor.WAIT_CURSOR);
        String[] selectUsernames = new String[selectRows.length];
        DefaultTableModel tableModel = (DefaultTableModel) this.getUserListTable().getModel();
        for (int i = 0; i < selectRows.length; i++) {
            String username = (String) tableModel.getValueAt(selectRows[i], 0);
            System.out.println("------ select user:" + username);
            selectUsernames[i] = username;
        }
        for (int i = 0; i < selectUsernames.length; i++) { //table
            this.delete1DBUser(selectUsernames[i]);
        }
        for (int i = 0; i < selectUsernames.length; i++) { //DB
            this.delete1row(selectUsernames[i]);
        }
        this.setCursor(Cursor.DEFAULT_CURSOR);
        this.userListTable.invalidate();
    }//GEN-LAST:event_deleteUserBtnActionPerformed

    public void delete1row(String selectUsername) {
        DefaultTableModel tableModel = (DefaultTableModel) this.getUserListTable().getModel();
        int rowCount = tableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String username = (String) tableModel.getValueAt(i, 0);
            if (username.equals(selectUsername)) {
                tableModel.removeRow(i);
            }
            rowCount = this.getUserListTable().getModel().getRowCount();
        }
    }

    private void delete1DBUser(String selectUsername) {
        try {
            UserService us = ServiceLocator.getUserService();
            CatAccUser user = us.findByName(selectUsername);
            System.out.println("find user ind db:" + user);
            us.delete(user);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "本地数据库访问出错,请重试!");
            this.dispose();
        }
    }

    private void newUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUserBtnActionPerformed
        // TODO add your handling code here:
        System.out.println("----action------to add user......");

        AddUserWindow uwd = AddUserWindow.getInstance();
        // uwd.setjPanel1(adduser);
        uwd.setVisible(true);
        uwd.setExtendedState(JFrame.NORMAL);
    }//GEN-LAST:event_newUserBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (resources.getString("NIMBUS").equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                UserView userViewWindow = UserView.getInstance();
                try {
                    userViewWindow.loadRows2UserListTable(0); //Grade is nginner
                    userViewWindow.setVisible(true);
                } catch (Throwable ex) {
                    Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteUserBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newUserBtn;
    private javax.swing.JTable userListTable;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public JTable getUserListTable() {
        return userListTable;
    }

    public void setUserListTable(JTable userListTable) {
        this.userListTable = userListTable;
    }

    public void loadRows2UserListTable(int grade) throws Throwable {
        List<CatAccUser> users = null;
        try {
            if (grade == 0) { //Enginner
                String hql = "from CatAccUser as u where u.catAccRole.roleName = 'Manager' or u.catAccRole.roleName = 'Operator'";
                users = ServiceLocator.getUserService().findByHql(hql);
            } else if (grade == 1) { //Admine
                String hql = "from CatAccUser as u where u.catAccRole.roleName = 'Operator'";
                users = ServiceLocator.getUserService().findByHql(hql);
            }
        } catch (Throwable e) {
            throw e;
        }
 
        DefaultTableModel tableModel = (DefaultTableModel) this.getUserListTable().getModel();
        tableModel.setRowCount(0);
       
        if(users == null) {
            return; //Not display any information
        }
        
        for (int i = 0; i < users.size(); i++) {
            String userName = users.get(i).getUserName();
            String roleName = users.get(i).getCatAccRole().getRoleName();
            Object[] row = new Object[]{userName, roleName};
            tableModel.addRow(row);
        }

    }

    public void add1row2UserListTable(String userName, String roleName, byte active) {
        DefaultTableModel tableModel = (DefaultTableModel) this.getUserListTable().getModel();
        Object[] row = new Object[]{userName, roleName};
        tableModel.addRow(row);
        System.out.println("---repaint table---");
        getUserListTable().repaint();
    }

    private void initTableModel() {
        String userNameColumnTitle = resources.getString("user.name");
        String typeColumnTitle = resources.getString("user.type");
        
        userListTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    userNameColumnTitle, typeColumnTitle
                }) {

            boolean[] canEdit = new boolean[]{
                false, false
            };
        });

    }
}
